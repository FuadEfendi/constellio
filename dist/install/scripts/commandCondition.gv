/*
 * Condition Script for implementing the wrapper.commandfile option
 * 
 * On first call the application is started
 * With each call the script check for the existance of a command file
 * This is a text file with one command per line
 * All commands in the file are executed and the file is deleted
 * The following commands are supported:
 * 
 * START 	      : start the application if it is not running
 * STOP  	      : stop the applicaiton if it is running
 * RESTART 	    : restart the application if it is running
 * DUMP  	      : request a thread dump
 * SHUTDOWN     : stop the wrapper and the application
 * STATE <file> : writes the current state of the application to the given file
 * STARTDUMP    : start of cyclic thread dump
 * STOPDUMP     : stop of cyclic thread dump
 * UPDATE       : stop, update, restart the application
 * 
 * Arguments: 
 * - fileName
 * 
 * Example Configuration:
 * 
 * wrapper.condition.script=scripts/commandCondition.gv 
 * wrapper.condition.script.args=cmd.txt 
 * wrapper.condition.cycle=1 
 */

// on first call file is bound
// set the file and start the process
if (callCount == 0)
{
	file = new File(this.args[0])
	process.start()
	// at start no cyclic thread dump
	nextDumpTime = -1
	// uncomment to start cyclic thread dump on start
	// nextDumpTime = System.currentTimeMillis()
}

// execute a command
doCommand = { cmd ->
	logger.info("executing file command "+cmd);
	if ("START".equals(cmd))
		process.start();
	else if ("STOP".equals(cmd))
		process.stop();
	else if ("RESTART".equals(cmd))
		process.restart();
	else if ("DUMP".equals(cmd))
		process.threadDump();
	else if ("STARTDUMP".equals(cmd))
	  	nextDumpTime = System.currentTimeMillis()
	else if ("STOPDUMP".equals(cmd))
	  	nextDumpTime = -1
	else if ("SHUTDOWN".equals(cmd))
	{
		process.stop();
		shutdown = true;
	}
	else if (cmd.startsWith("STATE "))
	{
		String fName = cmd.substring(6)
		writer = new File(fName).newWriter(false) // no append
		writer.write(process.getStringState())
		writer.close()
	}
	else if ("UPDATE".equals(cmd))
	{
		
		File wrapperConf = new File("."+ File.separator + "conf" + File.separator + "wrapper.conf");
		File previousWrapperConf = new File(wrapperConf.getParentFile(), wrapperConf.getName().replace(".conf", ".conf.bck"));

		List<String> lines = new ArrayList<String>();
		java.io.BufferedReader br = null;
		try {
			br = new java.io.BufferedReader(new java.io.FileReader(wrapperConf));
			String line = null;

			while ((line = br.readLine()) != null) {

				int windowsWebappIndex = line.indexOf("\\\\webapp");
				if (windowsWebappIndex != -1) {
					String currentWebapp = null;
					String newWebapp = null;
					int indexBackSlash = line.indexOf("\\\\", windowsWebappIndex + 2);
					currentWebapp = line.substring(windowsWebappIndex + 2, indexBackSlash);
					if (currentWebapp.contains("-")) {
						newWebapp = "webapp-" + (Integer.valueOf(currentWebapp.split("-")[1]) + 1);
					} else {
						newWebapp = "webapp-2";
					}
					line = line.replace(currentWebapp, newWebapp);
				}

				int linuxWebappIndex = line.indexOf("\\/webapp");
				if (linuxWebappIndex != -1) {
					String currentWebapp = null;
					String newWebapp = null;
					int indexBackSlash = line.indexOf("\\/", linuxWebappIndex + 2);
					currentWebapp = line.substring(linuxWebappIndex + 2, indexBackSlash);
					if (currentWebapp.contains("-")) {
						newWebapp = "webapp-" + (Integer.valueOf(currentWebapp.split("-")[1]) + 1);
					} else {
						newWebapp = "webapp-2";
					}
					line = line.replace(currentWebapp, newWebapp);
				}
				lines.add(line);

			}

		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (Exception e) {
				}
			}
		}

		if (previousWrapperConf.exists()) {
			previousWrapperConf.delete();
		}
		wrapperConf.renameTo(previousWrapperConf);

		java.io.BufferedWriter bw = null;
		try {
			bw = new java.io.BufferedWriter(new java.io.FileWriter(wrapperConf, false));
			for (String line : lines) {
				bw.write(line);
				bw.newLine();
			}

		} finally {
			bw.close();
		}
		process.restart();
	}
	else
		logger.info("unknown command");
}

if (file.exists())
// do the file
try
{
	shutdown = false;
	logger.info("command file found")
	file.eachLine {cmd -> doCommand(cmd)}
	file.delete();
	logger.info("command file deleted")
	if (shutdown)
	{
		Thread.sleep(5000)
		Runtime.getRuntime().halt(0);
	}
}
catch (Exception ex)
{
	logger.info("Error executing command file "+ex.getMessage())
}

try
{
if (nextDumpTime != -1 && nextDumpTime <= System.currentTimeMillis()) 
	{ 
		doCommand("DUMP")
		nextDumpTime = System.currentTimeMillis()+30000 
	}
}
catch (Exception ex)
{
	logger.info("Error executing cyclic thread dump "+ex.getMessage())
}